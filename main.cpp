#include <iostream>
#include <queue>
#include <stack>
#include "functions.h"

using namespace std;

string line = "";
string command = "";
string previousEl = "";
stack<string> s_stk;
queue<string> s_que;
queue<string> pars_que;

string returnStatements[128];
queue<string> functions[32];
queue<pair<string, int>> vars[32];


/*auto pushCom = [=](string& s) {
    if (s.empty()) {
        return;
    }
    if ()
    pars_que.push(s);
};*/

void moveChar(char element) {
    if (specSymbols->find(element)) {
        if (line.empty()) {
            return;
        }
        pars_que.push(command);
        if (element != ' ')
            pars_que.push(string(1, element));
        command.clear();
        return;
    }
    command.push_back(element);

}

int parsWithPriority(string element) {
    // ????? ?? ???? ????????? ??????? ???? ? ????? ?????? ?? ???????,  ????????? ??????????? ??? ???? ???
    //????? ????????? ??????? ????????, ? ?????? ????? ????? ??? ????? ?????????? ?? ????, ? ???? ???????????? ?????????????
    //?? ????????? ???? ???? - ??????? ???? ???????, ? ?????? ??????????? ??? ????????
    //??????? ???????? ??????

    //?? ? ??????
    if (isNumber(element)) {
        s_que.push(element);
        return 1;
    }

    //???? ???????/?????? ? ? ?????? ?????? ? ????????
    if (auto idx = priorityCommands->find(element)) {
        // auto idx = priorityCommands->find(element);
        //??????? ??? ??????? ?? ????? ? ?????, ??? ?? ????????? ??????? ??? ?????? ????????
        //?? ???????? ??????? ???????????? = ? , ?? ????????? ?? ????????? ? ?? ?? ????????? ? ???????????? ???????
        // ????? ??? ?? ???????? ????????? ??????? ? ???????, ?? ????????? ? ????
        while (pars_que.front() != "" && priorityPower[idx] <= priorityPower[priorityCommands->find(s_stk.top())]) {
            s_que.push(move(s_stk.top()));
            // previousEl = move(element);
            s_stk.pop();
        }
        s_stk.push(element);

        return 1;
    }
    //?? ? ??????? ???????, ?? ???? ?? ??????????????? ?? ????
    if (isVar(pars_que.front(), element)) {

        // vars->push(pair<string, int>(element, 0));
    }
    cout << "Compiling error!\n" << "Error element - " << element << endl;
    return -1;
}

void makeFunc() {

}

void calculate() {

}



int main() {
    int errors = 0;
    cin >> line;
     for (int i = 0; i < line.length(); i++) {
         moveChar(line[i]);
     }
    line.clear();
    for (int i = 0; i < pars_que.size(); i++) {
        errors = parsWithPriority(pars_que.front());
        if (errors == -1) break;
        // previousEl = move(pars_que.front());
        pars_que.pop();
    }

    if (errors == -1) return errors;

    return 0;
}